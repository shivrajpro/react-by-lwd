{"version":3,"sources":["services/AxiosInstance.js","services/PostsServices.js","store/actions/PostActions.js","Pages/CreatePost/CreatePost.js"],"names":["axiosInstance","axios","create","baseURL","interceptors","request","use","config","params","headers","state","store","getState","console","log","auth","idToken","postsUrl","getPostsAction","dispatch","get","then","response","posts","postsResponse","postId","post","id","push","formatPosts","data","type","GET_POSTS_SUCCESS","payload","getPostsSuccessAction","CreatePostAction","postData","history","CreatePost","singlePost","name","CREATE_POST_SUCCESS","CreatePostSuccessAction","editPostAction","patch","updatePost","updatedPost","EDIT_POST_SUCCESS","deletePostAction","delete","deletePost","DELETE_POST_SUCCESS","deletePostSuccess","props","useState","title","setTitle","description","setDescription","useDispatch","className","to","onSubmit","e","preventDefault","value","onChange","target"],"mappings":"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","file":"static/js/CreatePost.d6ed2115.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { store } from \"../store/store\";\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://legacy-react-v17-default-rtdb.firebaseio.com'\r\n})\r\n\r\naxiosInstance.interceptors.request.use(config=>{\r\n    // console.log('config',config);\r\n    config.params = config.params || {};\r\n    config.headers = config.headers || {};\r\n    const state = store.getState();\r\n    console.log('store',state);\r\n    config.params['auth'] = state.auth.auth.idToken;\r\n    config.headers['auth'] = `Bearer ${state.auth.auth.idToken}`;\r\n    // Cannot access 'CREATE_POST_ACTION' before initialization\r\n    // axios is asking for initialization of the actions\r\n    // actions are depending on the post service -> axios instance\r\n    // CYCLIC dependency is created\r\n    // Solution: create a PostTypes and add all action variables in it\r\n    return config;\r\n})\r\n\r\nexport default axiosInstance;\r\n","import axiosInstance from \"./AxiosInstance\";\r\n\r\nconst postsUrl = 'https://legacy-react-v17-default-rtdb.firebaseio.com';\r\n\r\nexport function getPosts(token) {\r\n    return axiosInstance.get(`${postsUrl}/posts.json`);\r\n}\r\n\r\nexport function CreatePost(postData) {\r\n    return axiosInstance.post(`${postsUrl}/posts.json`, postData);\r\n}\r\n\r\nexport function updatePost(postData) {\r\n    return axiosInstance.patch(\r\n        `${postsUrl}/posts/${postData.id}.json`, \r\n        postData\r\n    );\r\n}\r\n\r\nexport function deletePost(postId) {\r\n    return axiosInstance.delete(\r\n        `${postsUrl}/posts/${postId}.json`\r\n    );\r\n}\r\n\r\nexport function formatPosts(postsResponse) {\r\n    const posts = [];\r\n    for (const postId in postsResponse) {\r\n        const post = {\r\n            id: postId,\r\n            ...postsResponse[postId]\r\n        }\r\n        posts.push(post);\r\n    }\r\n    \r\n    return posts;\r\n}","import { CreatePost, formatPosts, getPosts, updatePost, deletePost } from \"../../services/PostsServices\";\r\nimport {\r\n    GET_POSTS_SUCCESS,\r\n    CREATE_POST_SUCCESS,\r\n    EDIT_POST_SUCCESS,\r\n    DELETE_POST_SUCCESS\r\n} from \"./PostTypes\";\r\n\r\nexport function getPostsAction() {\r\n    return (dispatch, getState) => {\r\n        const state = getState();\r\n        // console.log('state',state);\r\n        const token = state.auth.auth.idToken;\r\n        // have to pass token this way to every request\r\n        // if we dont use interceptors\r\n        getPosts(token).then(response => {\r\n            const posts = formatPosts(response.data);\r\n            dispatch(getPostsSuccessAction(posts));\r\n        })\r\n    }\r\n}\r\n\r\nexport function CreatePostAction(postData, history) {\r\n    return (dispatch) => {\r\n        CreatePost(postData).then(response => {\r\n            const singlePost = {\r\n                id: response.data.name,\r\n                ...postData\r\n            }\r\n            dispatch(CreatePostSuccessAction(singlePost));\r\n            history.push('/posts');\r\n        })\r\n    }\r\n}\r\n\r\nexport function getPostsSuccessAction(posts) {\r\n    return {\r\n        type: GET_POSTS_SUCCESS,\r\n        payload: posts\r\n    }\r\n}\r\n\r\nexport function CreatePostSuccessAction(singlePost) {\r\n    return {\r\n        type: CREATE_POST_SUCCESS,\r\n        payload: singlePost\r\n    }\r\n}\r\n\r\nexport function editPostAction(postData, history) {\r\n    return (dispatch) => {\r\n        console.log('editPostAction',postData);\r\n        // return;\r\n        updatePost(postData).then(response => {\r\n            dispatch(editPostSuccess(postData));\r\n            history.push('/posts');\r\n        })\r\n    }\r\n}\r\n\r\nexport function editPostSuccess(updatedPost) {\r\n    return {\r\n        type: EDIT_POST_SUCCESS,\r\n        payload: updatedPost\r\n    }\r\n}\r\n\r\nexport function deletePostAction(postId, history) {\r\n    return (dispatch) => {\r\n        deletePost(postId).then(response => {\r\n            dispatch(deletePostSuccess(postId));\r\n            history.push('/posts');\r\n        })\r\n    }\r\n}\r\n\r\nexport function deletePostSuccess(postId) {\r\n    return {\r\n        type: DELETE_POST_SUCCESS,\r\n        payload: postId\r\n    }\r\n}","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { CreatePostAction } from \"../../store/actions/PostActions\";\r\n\r\nexport default function CreatePost(props) {\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    function onCreatePost(e) {\r\n        e.preventDefault();\r\n\r\n        const postData = {\r\n            title,\r\n            description\r\n        }\r\n        dispatch(CreatePostAction(postData, props.history));\r\n        // props.history.push('/posts');\r\n    }\r\n    return (\r\n        <div className=\"p-2\" >\r\n            <div className=\"flex justify-between\" >\r\n                <h2 className=\"font-bold text-lg my-2\">create post works!</h2>\r\n                <Link to='/posts' className=\"bg-gray-500 text-white p-2 my-2\">Back to Posts</Link>\r\n            </div>\r\n            <div>\r\n                <form onSubmit={onCreatePost} >\r\n                    <div>\r\n                        <label>Title</label>\r\n                        <div>\r\n                            <input type=\"text\" className=\"border border-gray-500 px-2\"\r\n                                value={title}\r\n                                onChange={(e) => setTitle(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <label>Description</label>\r\n                        <div>\r\n                            <textarea className=\"border border-gray-500 px-2\"\r\n                                value={description}\r\n                                onChange={(e) => setDescription(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"submit\" className=\"bg-green-500 text-white p-2\" >Submit</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}